{"version":3,"sources":["components/PokeCard.js","components/Pagination.js","App.js","reportWebVitals.js","index.js"],"names":["PokeTarjeta","nombre","useState","fotito","setFotito","types","setTypes","pokeId","setPokeId","pokePeso","setPokePeso","pokeAltura","setPokeAltura","React","open","setOpen","useEffect","fetch","then","res","json","data","result","sprites","front_default","tipoPokemon","map","p","type","name","idPokemon","id","pesoPokemon","weight","alturaPokemon","height","catch","error","console","log","Fragment","Link","onClick","className","Paper","elevation","src","Dialog","onClose","DialogTitle","Grid","container","item","xs","Typography","variant","Divider","DialogContent","justify","align","Pagination","gotoNextPage","gotoPrevPage","Button","color","size","App","pokemon","setPokemon","currentPage","setCurrentPage","nextPage","setNextPage","prevPage","setPrevPage","loading","setLoading","next","previous","resultados","results","prueba","link","url","LinearProgress","spacing","sm","md","lg","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b8ce0b1b.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport Link from '@material-ui/core/Link';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport './PokeCard.css';\r\n\r\nexport default function PokeTarjeta({nombre}) {\r\nconst [fotito, setFotito] = useState('');\r\nconst [types, setTypes] = useState({});\r\nconst [pokeId,setPokeId] = useState([]);\r\nconst [pokePeso,setPokePeso] = useState([]);\r\nconst [pokeAltura,setPokeAltura] = useState([]);\r\nconst [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n//esto me trae las fotitos de los pokemoncitos!!\r\nuseEffect(() => {\r\n        fetch(`https://pokeapi.co/api/v2/pokemon/${nombre}`)\r\n        .then(res => res.json())\r\n        .then(data => \r\n           {\r\n            //con esto consigo la dire de la foto de los pokemon\r\n            const result = data.sprites.front_default;\r\n            setFotito(result);\r\n            //con esto, consigo el tipo de pokemon\r\n            const tipoPokemon = data.types.map(p => p.type.name);\r\n            //console.log(tipoPokemon);\r\n            setTypes(tipoPokemon);\r\n            //con esto, consigo el id  del pokemon\r\n            const idPokemon = data.id;\r\n            setPokeId(idPokemon);\r\n            //setTypes(tipoPokemon);\r\n            //con esto, consigo el peso  del pokemon\r\n            const pesoPokemon = data.weight;\r\n            setPokePeso(pesoPokemon);\r\n            //con esto, consigo la altura del pokemon\r\n            const alturaPokemon = data.height;\r\n            setPokeAltura(alturaPokemon);\r\n           }\r\n        )\r\n        .catch(error => console.log('error'))\r\n}, [{nombre}])\r\n\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Link onClick={handleClickOpen} className='poke-links' >\r\n            <Paper className='poke-tarjeta' key={nombre} elevation={5} >\r\n                <p>{nombre}</p>\r\n                <div className='poke-tipos'>\r\n                    <p>{types[0]}</p>\r\n                    <p>{types[1]}</p>\r\n                </div>\r\n                <img src={fotito} />\r\n            </Paper>\r\n            </Link>\r\n            <Dialog\r\n            open={open}\r\n            onClose={handleClose}\r\n            >\r\n                <DialogTitle className='pruebita'>\r\n                    <Grid container >\r\n                        <Grid item xs={10} ><Typography variant='h4' >{nombre}</Typography></Grid>\r\n                        <Grid item xs={2} ><Typography variant='h4' >#{pokeId}</Typography></Grid>\r\n                    </Grid>\r\n                    <Divider />\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                <Grid container>\r\n                    <Grid item xs={12} justify='center' align='center'><img src={fotito} /></Grid>\r\n                    <Grid item xs={12}><Typography variant='h6' >Type</Typography></Grid>\r\n                    <Grid item xs={12}>\r\n                        <Typography variant='body1'>{types[0]} {types[1]}</Typography>\r\n                        <Divider />\r\n                    </Grid>\r\n                    <Grid item xs={12}><Typography variant='h6' >Weight</Typography></Grid>\r\n                    <Grid item xs={12}>\r\n                        <Typography variant='body1'>{pokePeso} kg</Typography>\r\n                        <Divider />\r\n                    </Grid>\r\n                    <Grid item xs={12}><Typography variant='h6' >Height</Typography></Grid>\r\n                    <Grid item xs={12}>\r\n                        <Typography variant='body1'>{pokeAltura}0 cm</Typography>\r\n                        <Divider />\r\n                    </Grid>\r\n                    <Divider />\r\n                </Grid>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    )\r\n};\r\n","import { func } from 'prop-types';\r\nimport React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport './pagination.css';\r\n\r\nexport default function Pagination({gotoNextPage, gotoPrevPage}) {\r\n    return (\r\n        <React.Fragment>\r\n            <div id='botones' >\r\n           {gotoPrevPage && <Button onClick={gotoPrevPage} variant='contained' color='primary' size='large' >Prev</Button> } \r\n            {gotoNextPage &&<Button onClick={gotoNextPage} variant='contained' color='primary' size='large'>Next</Button> } \r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport PokeTarjeta from './components/PokeCard';\nimport Pagination from './components/Pagination';\nimport './app.css';\n\nfunction App() {\nconst [pokemon, setPokemon] = useState([]);\nconst [currentPage, setCurrentPage] = useState('https://pokeapi.co/api/v2/pokemon');\nconst [nextPage, setNextPage] = useState();\nconst [prevPage, setPrevPage] = useState();\nconst [loading, setLoading] = useState(true);\n\n// con este useeffect conseguimos el nombre y la dire de cara pokemon\nuseEffect(() => {\n  setLoading(true);\n  fetch(currentPage)\n  .then(res => res.json())\n  .then(data => \n    {\n      setNextPage(data.next);\n      setPrevPage(data.previous)\n      const resultados = data.results.map(prueba => ({nombre: prueba.name, link: prueba.url}))\n      setPokemon(resultados);\n      setLoading(false);\n    })\n    .catch(error => console.log('error'))\n}, [currentPage]);\n\n\n//Botones para cambiar de pagina\n\n  const nextPagePlease = () => {\n    setCurrentPage(nextPage)\n  }\n  const prevPagePlease = () => {\n    setCurrentPage(prevPage)\n  }\n  return (\n    <div className=\"App\">\n      {loading ? <LinearProgress className='progreso' color=\"primary\" /> :\n      \n      <React.Fragment>\n        <Grid container className='tarjetitas' spacing={2}>\n          <Grid item xs={12}>\n            <Typography variant='h1' className='titulo' >Pokedex</Typography>\n          </Grid>\n        {\n          pokemon.map( p => \n            <Grid item xs={6} sm={3} md={3} lg={2}>\n              <PokeTarjeta nombre={p.nombre} />\n            </Grid>\n            )\n        }\n          <Grid item xs={12}>\n          <Pagination \n            gotoNextPage={ nextPage ? nextPagePlease : null}\n            gotoPrevPage={prevPage ? prevPagePlease : null}\n            />\n          </Grid>\n        </Grid>\n      </React.Fragment>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}